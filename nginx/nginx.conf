user  nginx;
worker_processes  auto;

error_log /var/log/nginx/error.log ;
pid /var/run/nginx.pid;

events {
  worker_connections  1024;
}


http {
  # クライアントから送信されるリクエストボディの最大許可サイズ
  client_max_body_size 50m;

  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log /var/log/nginx/access.log  main;
  
  # クライアントへのレスポンス処理におけるsendfileシステムコール使用可否
  # ※カーネル側でコンテンツの複写をもつことで、レスポンスの改善をはかる設定
  sendfile on;
  keepalive_timeout 15;
  
  # 過剰なアクセスを制御する（DDoSアタック対策）
  # ※ひとつのIPアドレスから1秒間に1リクエストのみ許可する。
  limit_req_zone $binary_remote_addr zone=limit_req_by_ip:10m rate=5r/s;
  limit_req_log_level error;
  limit_req_status 503;

  set_real_ip_from   xxx.xxx.xxx.xxx;
  real_ip_header     X-Forwarded-For;

  gzip on;
  gzip_disable "msie6";
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;


  server {
    listen       80 default_server;
    listen       [::]:80;
    server_name  webauthn-boot.0g0.jp;
    
    # Let's Encrypt証明書の更新に必要
    location ^~ /.well-known/acme-challenge {
      alias /var/lib/letsencrypt/.well-known/acme-challenge;
      default_type "text/plain";
      try_files $uri =404;
    }

    location / {
      return 301 https://webauthn-boot.0g0.jp$request_uri;
    }
  }

  upstream backend {
    server app:8181;
  }

  server {
    listen      443 ssl default_server;
    listen      [::]:443 ssl;
    server_name  webauthn-boot.0g0.jp;

    # root /usr/share/nginx/html;
    access_log /var/log/nginx/access_ssl.log  main;
    error_log /var/log/nginx/error_ssl.log;
    
    # 証明書
    ssl_certificate /etc/letsencrypt/live/webauthn-boot.0g0.jp/fullchain.pem;
    # 秘密鍵
    ssl_certificate_key /etc/letsencrypt/live/webauthn-boot.0g0.jp/privkey.pem;

    ssl_session_timeout 5m;
    ssl_prefer_server_ciphers on;
    # ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE+RSAGCM:ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!DSS;

    # OCSP Stapling設定
    # オンライン証明書状態プロトコル：OCSP (Online Certificate Status Protocol) は、
    # SSLサーバ証明書の失効をチェックするプロトコル。
    # ssl_stapling on;
    # ssl_stapling_verify on;

    ssl_trusted_certificate /etc/letsencrypt/live/webauthn-boot.0g0.jp/fullchain.pem;
    resolver     8.8.8.8;
    add_header   Strict-Transport-Security 'max-age=31536000;';
    add_header   X-Frame-Options SAMEORIGIN;
    #add_header   X-XSS-Protection "1; mode=block";
    #add_header   X-Content-Type-Options nosniff;

    # 「proxy-」は「X-Forwarded-For」に正しいアクセス元のIPアドレスを入れるために必要
    # ※稼働しているウェブサービスで取得できる「X-Forwarded-For」にアクセス元の正しいIPアドレスを設定できる。
    proxy_redirect   off;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Remote-Addr $remote_addr;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-forwarded-For $proxy_add_x_forwarded_for;

    location / {
        # アクセス制御
        # 「https://webauthn-boot.0g0.jp/」以下へのアクセスについて、「limit_req_zone」で設定した通りの制御をかける。
        # 「burst」の部分は過剰なアクセスがあったときに少し遅延を挟む処理。f5連打を許容する。
        # 「nodelay」を書くと、サーバーにアクセスが集中しているときにf5連打された時は許容しない。
        limit_req zone=limit_req_by_ip burst=10 nodelay;
        proxy_pass    http://backend;
    }
  }
}


# ------------------------------------------------
# Nginxメモ（locationディレクティブ）
# ------------------------------------------------
# location プレフィックス URIのパス {
#     [locationコンテキスト]
# }
# ■プレフィックスの説明
# なし: 前方一致
# ^~: 前方一致。一致したら、正規表現の条件を評価しない。
# =: 完全一致。パスが等しい場合。
# ~: 正規表現（大文字・小文字を区別する）
# ~*: 正規表現（大文字・小文字を区別しない）
